// Code generated by sails-client-gen. DO NOT EDIT.
#[allow(unused_imports)]
use sails_rs::collections::BTreeMap;
#[allow(unused_imports)]
use sails_rs::{
    calls::{Activation, Call, Query, Remoting, RemotingAction},
    prelude::*,
    String,
};
pub struct AppFactory<R> {
    #[allow(dead_code)]
    remoting: R,
}
impl<R> AppFactory<R> {
    #[allow(unused)]
    pub fn new(remoting: R) -> Self {
        Self { remoting }
    }
}
impl<R: Remoting + Clone> traits::AppFactory for AppFactory<R> {
    type Args = R::Args;
    fn new(&self) -> impl Activation<Args = R::Args> {
        RemotingAction::<_, app_factory::io::New>::new(self.remoting.clone(), ())
    }
}

pub mod app_factory {
    use super::*;
    pub mod io {
        use super::*;
        use sails_rs::calls::ActionIo;
        pub struct New(());
        impl New {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <New as ActionIo>::encode_call(&())
            }
        }
        impl ActionIo for New {
            const ROUTE: &'static [u8] = &[12, 78, 101, 119];
            type Params = ();
            type Reply = ();
        }
    }
}
pub struct OracleService<R> {
    remoting: R,
}
impl<R> OracleService<R> {
    pub fn new(remoting: R) -> Self {
        Self { remoting }
    }
}
impl<R: Remoting + Clone> traits::OracleService for OracleService<R> {
    type Args = R::Args;
    fn change_provider(
        &mut self,
        new_provider: ActorId,
    ) -> impl Call<Output = OracleServiceResponse, Args = R::Args> {
        RemotingAction::<_, oracle_service::io::ChangeProvider>::new(
            self.remoting.clone(),
            new_provider,
        )
    }
    fn change_random_number(
        &mut self,
    ) -> impl Call<Output = OracleServiceResponse, Args = R::Args> {
        RemotingAction::<_, oracle_service::io::ChangeRandomNumber>::new(self.remoting.clone(), ())
    }
    fn change_random_number_in_range(
        &mut self,
        min: u64,
        max: u64,
    ) -> impl Call<Output = OracleServiceResponse, Args = R::Args> {
        RemotingAction::<_, oracle_service::io::ChangeRandomNumberInRange>::new(
            self.remoting.clone(),
            (min, max),
        )
    }
    fn change_random_word(&mut self) -> impl Call<Output = OracleServiceResponse, Args = R::Args> {
        RemotingAction::<_, oracle_service::io::ChangeRandomWord>::new(self.remoting.clone(), ())
    }
    fn hello(&mut self) -> impl Call<Output = String, Args = R::Args> {
        RemotingAction::<_, oracle_service::io::Hello>::new(self.remoting.clone(), ())
    }
    fn set_new_random_number(
        &mut self,
        new_random_number: u64,
    ) -> impl Call<Output = OracleServiceResponse, Args = R::Args> {
        RemotingAction::<_, oracle_service::io::SetNewRandomNumber>::new(
            self.remoting.clone(),
            new_random_number,
        )
    }
    fn set_new_random_word(
        &mut self,
        new_random_word: String,
    ) -> impl Call<Output = OracleServiceResponse, Args = R::Args> {
        RemotingAction::<_, oracle_service::io::SetNewRandomWord>::new(
            self.remoting.clone(),
            new_random_word,
        )
    }
    fn actual_random_number(&self) -> impl Query<Output = OracleServiceResponse, Args = R::Args> {
        RemotingAction::<_, oracle_service::io::ActualRandomNumber>::new(self.remoting.clone(), ())
    }
    fn actual_random_word(&self) -> impl Query<Output = OracleServiceResponse, Args = R::Args> {
        RemotingAction::<_, oracle_service::io::ActualRandomWord>::new(self.remoting.clone(), ())
    }
}

pub mod oracle_service {
    use super::*;

    pub mod io {
        use super::*;
        use sails_rs::calls::ActionIo;
        pub struct ChangeProvider(());
        impl ChangeProvider {
            #[allow(dead_code)]
            pub fn encode_call(new_provider: ActorId) -> Vec<u8> {
                <ChangeProvider as ActionIo>::encode_call(&new_provider)
            }
        }
        impl ActionIo for ChangeProvider {
            const ROUTE: &'static [u8] = &[
                52, 79, 114, 97, 99, 108, 101, 83, 101, 114, 118, 105, 99, 101, 56, 67, 104, 97,
                110, 103, 101, 80, 114, 111, 118, 105, 100, 101, 114,
            ];
            type Params = ActorId;
            type Reply = super::OracleServiceResponse;
        }
        pub struct ChangeRandomNumber(());
        impl ChangeRandomNumber {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <ChangeRandomNumber as ActionIo>::encode_call(&())
            }
        }
        impl ActionIo for ChangeRandomNumber {
            const ROUTE: &'static [u8] = &[
                52, 79, 114, 97, 99, 108, 101, 83, 101, 114, 118, 105, 99, 101, 72, 67, 104, 97,
                110, 103, 101, 82, 97, 110, 100, 111, 109, 78, 117, 109, 98, 101, 114,
            ];
            type Params = ();
            type Reply = super::OracleServiceResponse;
        }
        pub struct ChangeRandomNumberInRange(());
        impl ChangeRandomNumberInRange {
            #[allow(dead_code)]
            pub fn encode_call(min: u64, max: u64) -> Vec<u8> {
                <ChangeRandomNumberInRange as ActionIo>::encode_call(&(min, max))
            }
        }
        impl ActionIo for ChangeRandomNumberInRange {
            const ROUTE: &'static [u8] = &[
                52, 79, 114, 97, 99, 108, 101, 83, 101, 114, 118, 105, 99, 101, 100, 67, 104, 97,
                110, 103, 101, 82, 97, 110, 100, 111, 109, 78, 117, 109, 98, 101, 114, 73, 110, 82,
                97, 110, 103, 101,
            ];
            type Params = (u64, u64);
            type Reply = super::OracleServiceResponse;
        }
        pub struct ChangeRandomWord(());
        impl ChangeRandomWord {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <ChangeRandomWord as ActionIo>::encode_call(&())
            }
        }
        impl ActionIo for ChangeRandomWord {
            const ROUTE: &'static [u8] = &[
                52, 79, 114, 97, 99, 108, 101, 83, 101, 114, 118, 105, 99, 101, 64, 67, 104, 97,
                110, 103, 101, 82, 97, 110, 100, 111, 109, 87, 111, 114, 100,
            ];
            type Params = ();
            type Reply = super::OracleServiceResponse;
        }
        pub struct Hello(());
        impl Hello {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <Hello as ActionIo>::encode_call(&())
            }
        }
        impl ActionIo for Hello {
            const ROUTE: &'static [u8] = &[
                52, 79, 114, 97, 99, 108, 101, 83, 101, 114, 118, 105, 99, 101, 20, 72, 101, 108,
                108, 111,
            ];
            type Params = ();
            type Reply = String;
        }
        pub struct SetNewRandomNumber(());
        impl SetNewRandomNumber {
            #[allow(dead_code)]
            pub fn encode_call(new_random_number: u64) -> Vec<u8> {
                <SetNewRandomNumber as ActionIo>::encode_call(&new_random_number)
            }
        }
        impl ActionIo for SetNewRandomNumber {
            const ROUTE: &'static [u8] = &[
                52, 79, 114, 97, 99, 108, 101, 83, 101, 114, 118, 105, 99, 101, 72, 83, 101, 116,
                78, 101, 119, 82, 97, 110, 100, 111, 109, 78, 117, 109, 98, 101, 114,
            ];
            type Params = u64;
            type Reply = super::OracleServiceResponse;
        }
        pub struct SetNewRandomWord(());
        impl SetNewRandomWord {
            #[allow(dead_code)]
            pub fn encode_call(new_random_word: String) -> Vec<u8> {
                <SetNewRandomWord as ActionIo>::encode_call(&new_random_word)
            }
        }
        impl ActionIo for SetNewRandomWord {
            const ROUTE: &'static [u8] = &[
                52, 79, 114, 97, 99, 108, 101, 83, 101, 114, 118, 105, 99, 101, 64, 83, 101, 116,
                78, 101, 119, 82, 97, 110, 100, 111, 109, 87, 111, 114, 100,
            ];
            type Params = String;
            type Reply = super::OracleServiceResponse;
        }
        pub struct ActualRandomNumber(());
        impl ActualRandomNumber {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <ActualRandomNumber as ActionIo>::encode_call(&())
            }
        }
        impl ActionIo for ActualRandomNumber {
            const ROUTE: &'static [u8] = &[
                52, 79, 114, 97, 99, 108, 101, 83, 101, 114, 118, 105, 99, 101, 72, 65, 99, 116,
                117, 97, 108, 82, 97, 110, 100, 111, 109, 78, 117, 109, 98, 101, 114,
            ];
            type Params = ();
            type Reply = super::OracleServiceResponse;
        }
        pub struct ActualRandomWord(());
        impl ActualRandomWord {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <ActualRandomWord as ActionIo>::encode_call(&())
            }
        }
        impl ActionIo for ActualRandomWord {
            const ROUTE: &'static [u8] = &[
                52, 79, 114, 97, 99, 108, 101, 83, 101, 114, 118, 105, 99, 101, 64, 65, 99, 116,
                117, 97, 108, 82, 97, 110, 100, 111, 109, 87, 111, 114, 100,
            ];
            type Params = ();
            type Reply = super::OracleServiceResponse;
        }
    }

    #[allow(dead_code)]
    #[cfg(not(target_arch = "wasm32"))]
    pub mod events {
        use super::*;
        use sails_rs::events::*;
        #[derive(PartialEq, Debug, Encode, Decode)]
        #[codec(crate = sails_rs::scale_codec)]
        pub enum OracleServiceEvents {
            RequestRandomNumber,
            RequestRandomWord,
            RequestRangeOfRandomNumbers { min: u64, max: u64 },
        }
        impl EventIo for OracleServiceEvents {
            const ROUTE: &'static [u8] = &[
                52, 79, 114, 97, 99, 108, 101, 83, 101, 114, 118, 105, 99, 101,
            ];
            const EVENT_NAMES: &'static [&'static [u8]] = &[
                &[
                    76, 82, 101, 113, 117, 101, 115, 116, 82, 97, 110, 100, 111, 109, 78, 117, 109,
                    98, 101, 114,
                ],
                &[
                    68, 82, 101, 113, 117, 101, 115, 116, 82, 97, 110, 100, 111, 109, 87, 111, 114,
                    100,
                ],
                &[
                    108, 82, 101, 113, 117, 101, 115, 116, 82, 97, 110, 103, 101, 79, 102, 82, 97,
                    110, 100, 111, 109, 78, 117, 109, 98, 101, 114, 115,
                ],
            ];
            type Event = Self;
        }
        pub fn listener<R: Listener<Vec<u8>>>(remoting: R) -> impl Listener<OracleServiceEvents> {
            RemotingListener::<_, OracleServiceEvents>::new(remoting)
        }
    }
}
#[derive(PartialEq, Debug, Encode, Decode, TypeInfo)]
#[codec(crate = sails_rs::scale_codec)]
#[scale_info(crate = sails_rs::scale_info)]
pub enum OracleServiceResponse {
    NoGivenState,
    WIllChangeRandomNumber,
    WIllChangeRandomWord,
    RandomNumberSet,
    RandomWordSet,
    RandomNumber(u64),
    RandomWord(String),
    NewProviderSet,
    Errors(OracleErrors),
}
#[derive(PartialEq, Debug, Encode, Decode, TypeInfo)]
#[codec(crate = sails_rs::scale_codec)]
#[scale_info(crate = sails_rs::scale_info)]
pub enum OracleErrors {
    NoProviderInContract,
    ActionOnlyForOwner,
    ActionOnlyForProviderOrOwner,
    BadRange { min: u64, max: u64 },
}

pub mod traits {
    use super::*;
    #[allow(dead_code)]
    pub trait AppFactory {
        type Args;
        #[allow(clippy::new_ret_no_self)]
        #[allow(clippy::wrong_self_convention)]
        fn new(&self) -> impl Activation<Args = Self::Args>;
    }

    #[allow(clippy::type_complexity)]
    pub trait OracleService {
        type Args;
        fn change_provider(
            &mut self,
            new_provider: ActorId,
        ) -> impl Call<Output = OracleServiceResponse, Args = Self::Args>;
        fn change_random_number(
            &mut self,
        ) -> impl Call<Output = OracleServiceResponse, Args = Self::Args>;
        fn change_random_number_in_range(
            &mut self,
            min: u64,
            max: u64,
        ) -> impl Call<Output = OracleServiceResponse, Args = Self::Args>;
        fn change_random_word(
            &mut self,
        ) -> impl Call<Output = OracleServiceResponse, Args = Self::Args>;
        fn hello(&mut self) -> impl Call<Output = String, Args = Self::Args>;
        fn set_new_random_number(
            &mut self,
            new_random_number: u64,
        ) -> impl Call<Output = OracleServiceResponse, Args = Self::Args>;
        fn set_new_random_word(
            &mut self,
            new_random_word: String,
        ) -> impl Call<Output = OracleServiceResponse, Args = Self::Args>;
        fn actual_random_number(
            &self,
        ) -> impl Query<Output = OracleServiceResponse, Args = Self::Args>;
        fn actual_random_word(
            &self,
        ) -> impl Query<Output = OracleServiceResponse, Args = Self::Args>;
    }
}
